package com.thee5176.SpringDataJPA.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.thee5176.SpringDataJPA.Entity.Book;
import com.thee5176.SpringDataJPA.Repository.BookRepository;


@RestController
public class BookController {
	@Autowired
	BookRepository bookRepository;
	
	@PostMapping("/books")
	public ResponseEntity<?> createBook(@RequestBody Book book) {
		// Check if book with the same ISBN or title already exists
		if (!bookRepository.existsByIsbn( book.getTitle() ) || !bookRepository.existsByTitle( book.getTitle() )) {
			bookRepository.save(book);
		} else {
			return ResponseEntity.badRequest().body("Book with title '" + book.getTitle() + "' already exists.");
		}
		return ResponseEntity.ok().build();
	}
	
	@GetMapping("/books/{field}/{value}")
	public Book getBookById(@PathVariable String field, @PathVariable Object value) {
		
		// Single path variable -> Multiple fields filtering??
		if (field.equals("id")) {
			long id = Long.parseLong(value.toString());
			return bookRepository.findById(id);
		} else if (field.equals("isbn")) {
			String isbn = value.toString();
			return bookRepository.findByIsbn(isbn);
		} else if (field.equals("author")) {
			String author = value.toString();
			List<Book> booksByAuthor = bookRepository.findByAuthor(author);
			if (!booksByAuthor.isEmpty()) {
				return booksByAuthor.get(0); // Return the first book found
			}
		} else if (field.equals("title")) {
			String title = value.toString();
			List<Book> booksByTitle = bookRepository.findByTitleContaining(title);
			if (!booksByTitle.isEmpty()) {
				return booksByTitle.get(0); // Return the first book found
			}
		} else {
			throw new IllegalArgumentException("Invalid field: " + field);
		}
	}
	
	@GetMapping("/books")
	public List<Book> getAllBooks() {
		return bookRepository.findAll();
	}
	
	@PutMapping("/books/{id}")
	public Book updateBooks(@PathVariable long id, @RequestBody Book book) {
		book.setId(id);
		return bookRepository.save(book);
	}
	
	@DeleteMapping("/books/{id}")
	public ResponseEntity<?> deleteBooks(@PathVariable long id, @RequestBody Book book) {
			book.setId(id);
			bookRepository.delete(book);
		return ResponseEntity.ok().build();
	}
	
}
